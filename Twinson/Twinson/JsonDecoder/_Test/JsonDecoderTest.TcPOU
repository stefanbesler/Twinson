<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDecoderTest" Id="{f5f16609-da6a-435e-8d26-a4efca0c555c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK JsonDecoderTest EXTENDS JsonDecoder IMPLEMENTS IUnitTest]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Test_AddArrayIndexToKey" Id="{997eece4-29aa-4921-82a5-00c9de6877a1}">
      <Declaration><![CDATA[METHOD Test_AddArrayIndexToKey
VAR_INPUT
  assertions : IAssertions;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_path := 'ary['; _pathPtr := ADR(_path) + 4;
AddArrayIndexToKey(0);
_pathPtr^ := 0;
assertions.EqualsString(expected := 'ary[0]', actual := _path, message:='Index 0 is correctly converted to an array index key');

_path := 'ary['; _pathPtr := ADR(_path) + 4;
AddArrayIndexToKey(1);
_pathPtr^ := 0;
assertions.EqualsString(expected := 'ary[1]', actual := _path, message:='Index 1 is correctly converted to an array index key');

_path := 'ary['; _pathPtr := ADR(_path) + 4;
AddArrayIndexToKey(9);
_pathPtr^ := 0;
assertions.EqualsString(expected := 'ary[9]', actual := _path, message:='Index 9 is correctly converted to an array index key');

_path := 'ary['; _pathPtr := ADR(_path) + 4;
AddArrayIndexToKey(10);
_pathPtr^ := 0;
assertions.EqualsString(expected := 'ary[10]', actual := _path, message:='Index 10 is correctly converted to an array index key');

_path := 'ary['; _pathPtr := ADR(_path) + 4;
AddArrayIndexToKey(55);
_pathPtr^ := 0;
assertions.EqualsString(expected := 'ary[55]', actual := _path, message:='Index 55 is correctly converted to an array index key');]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Decode_NestedArray" Id="{8270d688-a825-4732-8ad8-272f25321512}">
      <Declaration><![CDATA[METHOD Test_Decode_NestedArray
VAR_INPUT
  assertions : IAssertions;
END_VAR
VAR
  element0 : IJsonElement;
  element1 : IJsonElement;
  element2 : IJsonElement;  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DecodeString('[[[4,2,3]]]');
element0 := Element('array[0][0][0]');
element1 := Element('array[0][0][1]');
element2 := Element('array[0][0][2]');

assertions.IsTrue(element0 <> 0, '');
assertions.IsTrue(element1 <> 0, '');
assertions.IsTrue(element2 <> 0, '');

IF element0 <> 0 AND element1 <> 0 AND element2 <> 0
THEN
	assertions.EqualsString('4', element0.AsString(), '');
	assertions.EqualsString('2', element1.AsString(), '');
	assertions.EqualsString('3', element2.AsString(), '');
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_SkipWhitespace" Id="{dc82c6e9-cadf-4c97-bb57-c8902c8d6d57}">
      <Declaration><![CDATA[METHOD Test_SkipWhitespace
VAR_INPUT
  assertions : IAssertions;
END_VAR
VAR
  json : STRING;  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[json := '              

        !';
_jsonPtr := ADR(json);
SkipWhitespaces();

_jsonPtr^ := 16#33;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>