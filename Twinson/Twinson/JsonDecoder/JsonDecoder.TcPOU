<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDecoder" Id="{c2bd40df-6169-4fb7-bccc-6fe5055a7ea3}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'conditionalshow_all_locals'}
{attribute 'no_explicit_call' := 'JsonDecoder is a class, do not call'}
FUNCTION_BLOCK JsonDecoder
VAR
  _jsonPtr : POINTER TO BYTE;
  _memPtr : POINTER TO BYTE;
  _key : STRING;
  _keyPtr : POINTER TO BYTE := ADR(_key);
  _assigments : ARRAY[0..ParameterList.MaxJsonAssignments] OF JsonAssignment;
  _assigmentsPtr : POINTER TO JsonAssignment := ADR(_assigments);
  _el : JsonElementType;
END_VAR
VAR_OUTPUT
  Error : BOOL;
  ErrorMessage : STRING;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{151abc50-572e-41de-9235-590a6cc2cb06}">
      <Declaration><![CDATA[METHOD PROTECTED Abort
VAR_INPUT
  errorMessage : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ErrorMessage := errorMessage;
THIS^.Error := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddArrayIndexToKey" Id="{80c6bfb9-4c7a-4f10-b0aa-cd5ada7217e6}">
      <Declaration><![CDATA[METHOD PROTECTED AddArrayIndexToKey : BOOL
VAR_INPUT
  element : INT;
END_VAR
VAR
  stackPtr : POINTER TO BYTE;
  startPtr, endPtr : POINTER TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stackPtr := _keyPtr;

// we have to write the index in reverse, for element 12, we first build a string
// that looks like ]21 and then we reverse it
// todo: test if a seperate branch for element < 10 is faster than doing the generic algorithm for this edge case as well
_keyPtr^ := 16#5D; _keyPtr := _keyPtr + 1;

REPEAT
  _keyPtr^ := INT_TO_BYTE(element MOD 10) + 16#30; _keyPtr := _keyPtr + 1;
  element := element / 10; 
UNTIL element = 0 END_REPEAT
_keyPtr^ := 0;
endPtr := _keyPtr-1;

// reverse string with XOR swap algorithm
WHILE stackPtr < endPtr
DO
  // swap first and last
  stackPtr^ := endPtr^ XOR stackPtr^;
  endPtr^ := stackPtr^ XOR endPtr^;
  stackPtr^ := endPtr^ XOR stackPtr^;
  
  stackPtr := stackPtr + 1;
  endPtr := endPtr - 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddAssignment" Id="{b4920f3e-12a7-4d6b-b494-42db676d6673}">
      <Declaration><![CDATA[METHOD PROTECTED AddAssignment
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_assigmentsPtr^.key := _key;
_assigmentsPtr^.valueType := _el;
_assigmentsPtr^.startPtr := _memPtr;
_assigmentsPtr^.endPtr := _jsonPtr - 1;
_assigmentsPtr := _assigmentsPtr + SIZEOF(JsonAssignment);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddToKey" Id="{489314ba-53d4-43bd-a926-ca72da578204}">
      <Declaration><![CDATA[METHOD PROTECTED AddToKey]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE _memPtr <> _jsonPtr
DO
  _keyPtr^ := _memPtr^;
  _keyPtr := _keyPtr + 1;
  _memPtr := _memPtr + 1;
END_WHILE
_keyPtr^ := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DecodeText" Id="{bd0f2002-7d0a-4d67-a5d7-f7acec12df17}">
      <Declaration><![CDATA[METHOD DecodeText
VAR_INPUT
  json : STRING(ParameterList.MaxJsonLength);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_jsonPtr := ADR(json);
_key := '';
_keyPtr := ADR(_key);
_assigmentsPtr := ADR(_assigments);

Error := FALSE;

WHILE _jsonPtr^ <> 0
DO
  SkipWhitespaces();

  IF GuessElementType() = JsonElementType.Object
  THEN
    ParseObject();
  ELSE
    Abort('Unexpected character');    
  END_IF  
  
  _jsonPtr := _jsonPtr + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GuessElementType" Id="{34940981-ada5-4521-bbcd-34f0ecb406f1}">
      <Declaration><![CDATA[METHOD PROTECTED GuessElementType : JsonElementType
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _jsonPtr^
OF
  16#22: // "
    GuessElementType := JsonElementType.Strng;
  16#30..16#39, // 0-9
  16#2B, // +
  16#2D, // -
  16#2E, // .
  16#65, // e
  16#45: // E
    GuessElementType := JsonElementType.Number;    
  16#7B: // {
    GuessElementType := JsonElementType.Object;
  16#5B: // [
    GuessElementType := JsonElementType.Arry;
  16#66, // f
  16#74: // t
    GuessElementType := JsonElementType.Boolean;
  16#6E: // n
    GuessElementType := JsonElementType.Null;      
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseArray" Id="{31f9e53c-038a-44b5-a16c-e5766a0048e5}">
      <Declaration><![CDATA[METHOD PROTECTED ParseArray
VAR
  stackPtr : POINTER TO BYTE;
  elements : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// add [ to the key and skip [ character
stackPtr := _keyPtr;
_keyPtr^ := 16#5B; _keyPtr := _keyPtr + 1;
_jsonPtr := _jsonPtr + 1;

REPEAT

  AddArrayIndexToKey(elements);
  ParseElement(stackPtr);
  _keyPtr := stackPtr + 1; _keyPtr^ := 0;
  elements := elements + 1;
  
  // got another element in this object?
  IF _jsonPtr^ = 16#2C // ,
  THEN
    _jsonPtr := _jsonPtr + 1; // ,
    SkipWhitespaces();      
  END_IF    

UNTIL _jsonPtr^ = 16#5D OR_ELSE _jsonPtr^ = 0 END_REPEAT // } or EOF

IF _jsonPtr^ <> 0
THEN
  // skip ]
  _jsonPtr := _jsonPtr + 1;
  
  // pop key pointer
  _keyPtr := stackPtr; _keyPtr^ := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseElement" Id="{78f23aa0-bb02-4013-930a-f14a7bc442cb}">
      <Declaration><![CDATA[METHOD PROTECTED ParseElement
VAR_INPUT
  stackPtr : POINTER TO BYTE;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SkipWhitespaces();
_el := GuessElementType();
CASE _el
OF
  JsonElementType.Strng:
    // skip " and additional whitespaces
    _jsonPtr := _jsonPtr + 1;
    _memPtr := _jsonPtr;
    SkipString();
    AddAssignment();
    // skip "
    _jsonPtr := _jsonPtr + 1;    
  
  JsonElementType.Number:
    _memPtr := _jsonPtr;
    SkipNumber();
    AddAssignment();
    
  JsonElementType.Object:
    // add . to the key and continue with the next object
    _keyPtr^ := 16#2E;
    _keyPtr := _keyPtr + 1;
    ParseObject();
  
    // remove . from the key
    _keyPtr^ := 0;
    _keyPtr := _keyPtr - 1;
  
  JsonElementType.Arry:
    ParseArray();
    
  JsonElementType.Boolean:
    _memPtr := _jsonPtr;
    SkipBoolean();
    AddAssignment();
    
  JsonElementType.Null:
    _memPtr := _jsonPtr;
    _jsonPtr := _jsonPtr + 4; // null
    AddAssignment();
ELSE
  Abort('Unexpected character');
  RETURN;
END_CASE

SkipWhitespaces();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseObject" Id="{d3f57aad-1f9b-4dd9-890f-af9c01be5099}">
      <Declaration><![CDATA[METHOD PROTECTED ParseObject
VAR
  stackPtr : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// push key pointer
stackPtr := _keyPtr;

// skip {
_jsonPtr := _jsonPtr + 1;
SkipWhitespaces();

REPEAT

  _el := GuessElementType();
  IF _el <> JsonElementType.Strng
  THEN
    Abort('Unexpected character');
    RETURN;    
  END_IF
  
  // skip "
  _jsonPtr := _jsonPtr + 1;
  _memPtr := _jsonPtr;
  SkipString();
  
  // chain key
  AddToKey();
  
  // skip " and additional whitespaces
  _jsonPtr := _jsonPtr + 1;
  SkipWhitespaces();
  
  IF _jsonPtr^ <> 16#3A // :
  THEN
    Abort('Expected colon');
    RETURN;
  END_IF
  
  // skip :
  _jsonPtr := _jsonPtr + 1;
  ParseElement(stackPtr);
  
  // got another element in this object?
  IF _jsonPtr^ = 16#2C // ,
  THEN
    _jsonPtr := _jsonPtr + 1; // ,
    // pop key pointer
    _keyPtr := stackPtr; 
    _keyPtr^ := 0;
    SkipWhitespaces();      
  END_IF  
  
UNTIL _jsonPtr^ = 16#7D OR_ELSE _jsonPtr^ = 0 END_REPEAT // } or EOF

IF _jsonPtr^ <> 0
THEN
  // skip }
  _jsonPtr := _jsonPtr + 1;
  
  // pop key pointer
  _keyPtr := stackPtr; 
  _keyPtr^ := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipBoolean" Id="{8891d801-d872-42b4-a283-4d50aacd8df8}">
      <Declaration><![CDATA[METHOD PROTECTED SkipBoolean : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_jsonPtr := _jsonPtr + 4; // true

IF _jsonPtr^ = 16#66 // f
THEN
  _jsonPtr := _jsonPtr + 1; // false
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipNumber" Id="{77969f1c-9894-42e4-81b6-8fc4acc31c50}">
      <Declaration><![CDATA[METHOD PROTECTED SkipNumber
VAR
  ch : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ch := _jsonPtr^;
WHILE (ch >= 16#30 AND_THEN ch <= 16#39) OR_ELSE ch = 16#2B OR_ELSE ch = 16#2D OR_ELSE ch = 16#2E OR_ELSE ch = 16#65 OR_ELSE ch = 16#45
DO
  _jsonPtr := _jsonPtr + 1;
  ch := _jsonPtr^;
END_WHILE ]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipString" Id="{1acc1bd3-5568-4718-af78-edb71be6e7a9}">
      <Declaration><![CDATA[METHOD PROTECTED SkipString
VAR
  len : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE _jsonPtr^ <> 16#22
DO
  _jsonPtr := _jsonPtr + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipWhitespaces" Id="{eb42f950-84b2-4370-a0c4-aff9ce5ce2f4}">
      <Declaration><![CDATA[METHOD PROTECTED SkipWhitespaces
VAR
  ch : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ch := _jsonPtr^;
WHILE(ch = 16#20 OR_ELSE ch = 16#12 OR_ELSE ch = 16#15 OR_ELSE ch = 16#11 OR_ELSE ch = 0)
DO
  _jsonPtr := _jsonPtr + 1;
  ch := _jsonPtr^;
END_WHILE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>