<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDecoder" Id="{c2bd40df-6169-4fb7-bccc-6fe5055a7ea3}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'conditionalshow_all_locals'}
{attribute 'no_explicit_call' := 'JsonDecoder is a class, do not call'}
FUNCTION_BLOCK JsonDecoder
VAR
  _key : STRING;
  _jsonPtr : POINTER TO BYTE;
  _memPtr : POINTER TO BYTE;
  
  _elements : ARRAY[0..ParameterList.MaxJsonAssignments] OF JsonElement;
  _elementCount : INT;  
  
  _root : JsonNode;
  _nodes : ARRAY[0..ParameterList.MaxJsonAssignments] OF JsonNode;
  _nodeCount : INT;
  
  _el : JsonElementType;
END_VAR
VAR_OUTPUT
  Error : BOOL;
  ErrorMessage : STRING;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="_Element" Id="{01b90b91-98df-458d-95e0-7ae03947dbdb}">
      <Declaration><![CDATA[METHOD PROTECTED _Element : IJsonElement
VAR_INPUT
  node : REFERENCE TO JsonNode;
END_VAR
VAR_IN_OUT CONSTANT
  path : STRING;
END_VAR
VAR_INPUT
  readLen : UINT;  
END_VAR
VAR
  writePtr : POINTER TO BYTE;
  readPtr : POINTER TO BYTE;
  child : REFERENCE TO JsonNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// get next key, for part1.part2.part3, part1 is yieled
readPtr := ADR(path) + readLen;
writePtr := ADR(_key);
WHILE readPtr^ <> 16#0 AND_THEN readPtr^ <> 16#2E AND_THEN readPtr^ <> 16#5B AND_THEN readPtr^ <> 16#5D // eof, . or [
DO
  writePtr^ := readPtr^;
  writePtr := writePtr + 1;
  readPtr := readPtr + 1;
  readLen := readLen + 1;
END_WHILE
writePtr^ := 0;

IF readPtr^ <> 0 AND_THEN readPtr^ = 16#5D  // skip ]
THEN 
  readLen := readLen + 1;
  readPtr := readPtr + 1; 
END_IF

IF readPtr^ <> 0 AND_THEN readPtr^ = 16#2E // skip .  
THEN 
  readLen := readLen + 1; 
  readPtr := readPtr + 1;
END_IF  

IF readPtr^ <> 0 AND_THEN readPtr^ = 16#5B  // skip [  
THEN 
  readLen := readLen + 1;
  readPtr := readPtr + 1;  
END_IF 

// search for child with current key, if a match is found
// check if we are at the end of the path and return the potential value,
// otherwise recurse to next level
child REF= node.FirstChild;
WHILE ADR(child) <= ADR(node.LastChild)
DO
  IF child.Name = _key
  THEN
    IF __ISVALIDREF(child.FirstChild) AND_THEN child.FirstChild.IsArray // we are dealing with an array
    THEN
      _Element := THIS^._Element(child.FirstChild, path, readLen);
    ELSIF readPtr^ <> 0
    THEN
      _Element := THIS^._Element(child, path, readLen);    
    ELSIF NOT child.IsArray AND_THEN __ISVALIDREF(child.Element) // direct access, exact match
    THEN
      _Element := child.Element;
    END_IF
	END_IF
  
  IF _Element <> 0
  THEN
    RETURN;
	END_IF
  child REF= child.Next;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Abort" Id="{151abc50-572e-41de-9235-590a6cc2cb06}">
      <Declaration><![CDATA[METHOD PROTECTED Abort
VAR_IN_OUT CONSTANT
  errorMessage : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ErrorMessage := errorMessage;
THIS^.Error := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddElement" Id="{b4920f3e-12a7-4d6b-b494-42db676d6673}">
      <Declaration><![CDATA[METHOD PROTECTED AddElement
VAR_INPUT
  node : REFERENCE TO JsonNode;
END_VAR
VAR
  element : REFERENCE TO JsonElement;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[element REF= _elements[_elementCount];
element.ValueType := _el;
element.StartPtr := _memPtr;
element.EndPtr := _jsonPtr;
_elementCount := _elementCount + 1;

node.Element REF= element;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNode" Id="{489314ba-53d4-43bd-a926-ca72da578204}">
      <Declaration><![CDATA[METHOD PROTECTED AddNode : REFERENCE TO JsonNode
VAR_INPUT
  node : REFERENCE TO JsonNode;
END_VAR
VAR
  namePtr : POINTER TO BYTE;
  memPtr : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddNode REF= _nodes[_nodeCount];
IF __ISVALIDREF(node.LastChild)
THEN
  node.LastChild.Next REF= AddNode;
  node.LastChild REF= AddNode;
ELSE
  node.FirstChild REF= AddNode;
  node.LastChild REF= AddNode;
END_IF

// set node name
namePtr := ADR(AddNode.Name);
memPtr := _memPtr;
WHILE memPtr <> _jsonPtr
DO
  namePtr^ := memPtr^;
  namePtr := namePtr + 1;
  memPtr := memPtr + 1;
END_WHILE
namePtr^ := 0;
// reset elements
AddNode.IsArray := FALSE;
AddNode.FirstChild REF= 0;
AddNode.LastChild REF= 0;
_nodeCount := _nodeCount + 1;
  
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Decode" Id="{9e0a559b-3090-4700-8907-be0f1642151e}">
      <Declaration><![CDATA[METHOD Decode
VAR_INPUT
  json : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_jsonPtr := json;
_elementCount := 0;
_nodeCount := 0;

Error := FALSE;

WHILE _jsonPtr^ <> 0
DO
  SkipWhitespaces();

  _el := GuessElementType();
  IF _el = JsonElementType.Object
  THEN
    _root.Name := '';
    _root.IsArray := FALSE;  
    ParseObject(_root);
  ELSIF _el = JsonElementType.Arry
  THEN
    _root.Name := 'list';
    _root.IsArray := TRUE;
    ParseArray(_root);
  ELSE
    Abort('Unexpected character');    
  END_IF  
  
  _jsonPtr := _jsonPtr + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DecodeString" Id="{bd0f2002-7d0a-4d67-a5d7-f7acec12df17}">
      <Declaration><![CDATA[METHOD DecodeString
VAR_IN_OUT CONSTANT
  json : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Decode(ADR(json));]]></ST>
      </Implementation>
    </Method>
    <Method Name="Element" Id="{4a76f022-7ad8-455a-86cd-e4ff5a774583}">
      <Declaration><![CDATA[METHOD Element : IJsonElement
VAR_IN_OUT CONSTANT
  path : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Element := _Element(_root, path, 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GuessElementType" Id="{34940981-ada5-4521-bbcd-34f0ecb406f1}">
      <Declaration><![CDATA[METHOD PROTECTED GuessElementType : JsonElementType
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _jsonPtr^
OF
  16#22: // "
    GuessElementType := JsonElementType.Strng;
  16#30..16#39, // 0-9
  16#2B, // +
  16#2D, // -
  16#2E, // .
  16#65, // e
  16#45: // E
    GuessElementType := JsonElementType.Number;    
  16#7B: // {
    GuessElementType := JsonElementType.Object;
  16#5B: // [
    GuessElementType := JsonElementType.Arry;
  16#66, // f
  16#74: // t
    GuessElementType := JsonElementType.Boolean;
  16#6E: // n
    GuessElementType := JsonElementType.Null;      
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseArray" Id="{31f9e53c-038a-44b5-a16c-e5766a0048e5}">
      <Declaration><![CDATA[METHOD PROTECTED ParseArray
VAR_INPUT
  node : REFERENCE TO JsonNode;
END_VAR
VAR
  child : REFERENCE TO JsonNode;
  elements : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[node.IsArray := TRUE;
_jsonPtr := _jsonPtr + 1;

REPEAT

  child REF= AddNode(node);
  WriteArrayIndexAsNodeName(child, elements);
  elements := elements + 1;
  ParseElement(child);
  
  // got another element in this object?
  IF _jsonPtr^ = 16#2C // ,
  THEN
    _jsonPtr := _jsonPtr + 1; // ,
    SkipWhitespaces();      
  END_IF    

UNTIL _jsonPtr^ = 16#5D OR_ELSE _jsonPtr^ = 0 END_REPEAT // } or EOF

IF _jsonPtr^ <> 0
THEN
  // skip ]
  _jsonPtr := _jsonPtr + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseElement" Id="{78f23aa0-bb02-4013-930a-f14a7bc442cb}">
      <Declaration><![CDATA[METHOD PROTECTED ParseElement
VAR_INPUT
  node : REFERENCE TO JsonNode;  
END_VAR
VAR
  child : REFERENCE TO JsonNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SkipWhitespaces();
_el := GuessElementType();
CASE _el
OF
  JsonElementType.Strng:
    // skip " and additional whitespaces
    _jsonPtr := _jsonPtr + 1;
    _memPtr := _jsonPtr;
    SkipString();
    AddElement(node);
    // skip "
    _jsonPtr := _jsonPtr + 1;    
  
  JsonElementType.Number:
    _memPtr := _jsonPtr;
    SkipNumber();
    AddElement(node);
    
  JsonElementType.Object:
    // add . to the key and continue with the next object
    //_pathPtr^ := 16#2E;
    //_pathPtr := _pathPtr + 1;
    ParseObject(node);
  
    // remove . from the key
    //_pathPtr^ := 0;
    //_pathPtr := _pathPtr - 1;
  
  JsonElementType.Arry:
  
    child REF= AddNode(node);
    child.Name := '';
    ParseArray(child);
    
  JsonElementType.Boolean:
    _memPtr := _jsonPtr;
    SkipBoolean();
    AddElement(node);
    
  JsonElementType.Null:
    _memPtr := _jsonPtr;
    _jsonPtr := _jsonPtr + 4; // null
    AddElement(node);
ELSE
  Abort('Unexpected character');
  RETURN;
END_CASE

SkipWhitespaces();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseObject" Id="{d3f57aad-1f9b-4dd9-890f-af9c01be5099}">
      <Declaration><![CDATA[METHOD PROTECTED ParseObject
VAR_INPUT
  node : REFERENCE TO JsonNode;  
END_VAR
VAR
  child : REFERENCE TO JsonNode;
  childNamePtr : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// skip {
_jsonPtr := _jsonPtr + 1;
SkipWhitespaces();

REPEAT

  _el := GuessElementType();
  IF _el <> JsonElementType.Strng
  THEN
    Abort('Unexpected character');
    RETURN;    
  END_IF
  
  // skip "
  _jsonPtr := _jsonPtr + 1;
  _memPtr := _jsonPtr;
  SkipString();
  
  // chain key
  child REF= AddNode(node);
    
  // skip " and additional whitespaces
  _jsonPtr := _jsonPtr + 1;
  SkipWhitespaces();
  
  IF _jsonPtr^ <> 16#3A // :
  THEN
    Abort('Expected colon');
    RETURN;
  END_IF
  
  // skip :
  _jsonPtr := _jsonPtr + 1;
  ParseElement(child);
  
  // got another element in this object?
  IF _jsonPtr^ = 16#2C // ,
  THEN
    _jsonPtr := _jsonPtr + 1; // ,
    SkipWhitespaces();      
  END_IF  
  
UNTIL _jsonPtr^ = 16#7D OR_ELSE _jsonPtr^ = 0 END_REPEAT // } or EOF

IF _jsonPtr^ <> 0
THEN
  // skip }
  _jsonPtr := _jsonPtr + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipBoolean" Id="{8891d801-d872-42b4-a283-4d50aacd8df8}">
      <Declaration><![CDATA[METHOD PROTECTED SkipBoolean
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_jsonPtr := _jsonPtr + 4; // true

IF _jsonPtr^ = 16#66 // f
THEN
  _jsonPtr := _jsonPtr + 1; // false
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipNumber" Id="{77969f1c-9894-42e4-81b6-8fc4acc31c50}">
      <Declaration><![CDATA[METHOD PROTECTED SkipNumber
VAR
  ch : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ch := _jsonPtr^;
WHILE (ch >= 16#30 AND_THEN ch <= 16#39) OR_ELSE ch = 16#2B OR_ELSE ch = 16#2D OR_ELSE ch = 16#2E OR_ELSE ch = 16#65 OR_ELSE ch = 16#45
DO
  _jsonPtr := _jsonPtr + 1;
  ch := _jsonPtr^;
END_WHILE ]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipString" Id="{1acc1bd3-5568-4718-af78-edb71be6e7a9}">
      <Declaration><![CDATA[METHOD PROTECTED SkipString]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE _jsonPtr^ <> 16#22
DO
  _jsonPtr := _jsonPtr + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipWhitespaces" Id="{eb42f950-84b2-4370-a0c4-aff9ce5ce2f4}">
      <Declaration><![CDATA[METHOD PROTECTED SkipWhitespaces
VAR
  ch : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ch := _jsonPtr^;
WHILE ch > 0 AND_THEN ch <= 16#20
DO
  _jsonPtr := _jsonPtr + 1;
  ch := _jsonPtr^;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteArrayIndexAsNodeName" Id="{0844489d-f692-4848-a8a9-c7fd5ee901c8}">
      <Declaration><![CDATA[METHOD PROTECTED WriteArrayIndexAsNodeName
VAR_INPUT
  node : REFERENCE TO JsonNode;
  element : INT;
END_VAR
VAR
  writePtr : POINTER TO BYTE;
  reversePtr : POINTER TO BYTE;  
  endPtr : POINTER TO BYTE;  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[writePtr := ADR(node.Name);
reversePtr := ADR(node.Name);

// we have to write the index in reverse, for element 12, we first build a string
// that looks like 21 and then we reverse it
// todo: test if a seperate branch for element < 10 is faster than doing the generic algorithm for this edge case as well
REPEAT
  writePtr^ := INT_TO_BYTE(element MOD 10) + 16#30; writePtr := writePtr + 1;
  element := element / 10; 
UNTIL element = 0 END_REPEAT
writePtr^ := 0;

// reverse string with XOR swap algorithm
endPtr := writePtr - 1;
WHILE reversePtr < endPtr
DO
  // swap first and last
  reversePtr^ := endPtr^ XOR reversePtr^;
  endPtr^ := reversePtr^ XOR endPtr^;
  reversePtr^ := endPtr^ XOR reversePtr^;
  
  reversePtr := reversePtr + 1;
  endPtr := endPtr - 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>